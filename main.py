#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Oct 29 22:41:10 2020
#

import numpy, matplotlib
if matplotlib.__version__ < '2.2':
    raise ValueError("Minimum Matplotlib version required: 2.2")
#
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

import wx
import os
from shutil import make_archive

# read from glade
import frame2D_GUI
# read from main solver
import stiff2D

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class MyFrame(frame2D_GUI.MyFrame):


    def OnChooseTargetFile(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname = self.showFileDialog()
        self.text_ctrl_1.SetValue(pathname)

    def OnChooseOutputFile(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname = self.showFileDialog()
        self.text_ctrl_2.SetValue(pathname)

    def showFileDialog(self):
        with wx.FileDialog(self, 'Pls, select File',
                          style=wx.DD_DEFAULT_STYLE
                                | wx.DD_DIR_MUST_EXIST
                                | wx.DD_CHANGE_DIR
                          ) as dialog:
            if dialog.ShowModal() == wx.ID_CANCEL:
                return
            return dialog.GetPath()

    def OnCancel(self, event):  # wxGlade: MyFrame.<event_handler>
        self.Destroy()

    def OnExec(self, event):  # wxGlade: MyFrame.<event_handler>
        target_file = self.text_ctrl_1.GetValue()
        output_file = self.text_ctrl_2.GetValue()
        #
        #fmt = self.combo_box_1.GetValue()
        #filepath = os.path.join(output_file, os.path.basename(target_file))

        #print(target_file)

        # Main Program
        # 入出力ファイルを初期設定以外にする場合は引数 inp_path out_path を指定
        obj = stiff2D.Stiff2D()
        # read data
        if obj.read_data_xlsx(target_file):
            # exe. calculation
            if obj.calc_main():
                # write result
                if obj.write_result_xlsx(output_file):
                    print('Complete')
                    dlg = wx.MessageDialog(self, 'Cal End',
                                           'Complete',
                                           wx.OK | wx.ICON_INFORMATION
                                           )
                    dlg.ShowModal()
                    dlg.Destroy()
                else:
                    print("出力ファイルの書き込みエラー")
                    dlg = wx.MessageDialog(self, 'Erro output',
                                           'Error output',
                                           wx.OK | wx.ICON_ERROR
                                           )
                    dlg.ShowModal()
                    dlg.Destroy()

            else:
                print('実行時エラー : ' + obj.error)

                dlg = wx.MessageDialog(self, 'Erro' + obj.error,
                                       'Error Execution',
                                       wx.OK | wx.ICON_ERROR
                                       )
                dlg.ShowModal()
                dlg.Destroy()

        else:
            print("入力ファイルの読み込みエラー")
            dlg = wx.MessageDialog(self, 'Error read input',
                                   'Read Error',
                                   wx.OK | wx.ICON_ERROR
                                   )
            dlg.ShowModal()
            dlg.Destroy()


    def OnPlot(self, event):  # wxGlade: MyFrame.<event_handler>
        # Make Model
        obj = stiff2D.Stiff2D()
        target_file = self.text_ctrl_1.GetValue()
        obj.read_data_xlsx(target_file)
        obj.write_model()

        #print(obj.xp,obj.yp)
        for i in range(len(obj.memb)):
            #print(obj.xp[i+1],obj.yp[i+1])
            self.matplotlib_axes.plot(obj.xp[i+1],obj.yp[i+1],color="black")


        self.matplotlib_canvas.draw()
        event.Skip()
        """
        matplotlib_axes.pyplot.gca().spines['right'].set_visible(False)
        matplotlib_axes.pyplot.gca().spines['top'].set_visible(False)
        matplotlib_axes.pyplot.gca().yaxis.set_ticks_position('left')
        matplotlib_axes.pyplot.gca().xaxis.set_ticks_position('bottom')
        """



        """
        xmin = xmax = step = None
        try:
            #xmin = float( self.text_xmin.GetValue() )
            xmin = float(0)
            #self.text_xmin.SetBackgroundColour(wx.WHITE)
        except:
            #self.text_xmin.SetBackgroundColour(wx.RED)
            print('okay')
        try:
            #xmax = float( self.text_max.GetValue() )
            xmax = float(10)
            #self.text_max.SetBackgroundColour(wx.WHITE)
        except:
            #self.text_max.SetBackgroundColour(wx.RED)
            print('okay')
        try:
            #step = float( self.text_xstep.GetValue() )
            step = float(0.1)
            #self.text_xstep.SetBackgroundColour(wx.WHITE)
        except:
            #self.text_xstep.SetBackgroundColour(wx.RED)
            print('okay')

        x = numpy.arange(xmin, xmax, step)
        # build globals with some functions
        g = {}
        for name in ["sin","cos","tan","ufunc","square"]:
            g[name] = getattr(numpy, name)
            #y = eval(self.text_function.GetValue(), g, {"numpy":numpy, "x":x})
            y = eval('sin(x)', g, {"numpy":numpy, "x":x})
            self.matplotlib_axes.plot(x,y)
            self.matplotlib_canvas.draw()
            event.Skip()
        """
        
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
